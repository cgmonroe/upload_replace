<?php
/**
 * @file
 * A module file for providing functionality to replace files on upload
 * Typical Drupal behavior is to rename files on upload to <filename>_0.<ext>
 * This module modifies that behavior.
 *
 * 1.0 - Behavior is as follows: when a user is replacing a file (remove and save).
 *   if the file to be removed is <filename>.<ext> and the file to be saved is
 *   <filename>_<[0-9]+>.<ext> then the file will be removed and the new file will
 *   be renamed to <filename>.<ext>
 */

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function upload_replace_file_update(Drupal\file\FileInterface $new_file) {
  if ($new_file->get('fid')->isEmpty()) {
    //Nothing to do if no fileid
    return;
  }

  $desired_destination = preg_replace('/_[0-9]+\.([^.]*)$/', '.$1', $new_file->getFileUri());
  $db_path = db_select('file_managed', 'f')
    ->fields('f', array('uri', ))
    ->condition('fid', $new_file->get('fid')->value)
    ->execute()
    ->fetchField();
  if ($db_path != $new_file->getFileUri()) {
    //this happens when a reversion is being reverted
    $next_good_filepath = file_destination($desired_destination, FILE_EXISTS_RENAME);
    db_update('file_managed')
      ->fields(array('uri' => $next_good_filepath))
      ->condition('fid', $new_file->get('fid')->value)
      ->execute();
    $new_file->setFileUri($desired_destination);
  }
  else {
    //If the filename has be modified by adding a _0 value, or
    //on certain situations the filepath will not match the filepath in the db, such as
    //when reverting a revision.  When reverting a revision change the filename as well
    if (!strpos($new_file->getFileUri(), $new_file->getFilename())) {
      //the filename is not in the filepath, so drupal must have added a "_0" before the extension
      //find the file that is blocking this file from keeping the correct path
      $result = db_select('file_managed', 'f')
        ->fields('f')
        ->condition('uri', $desired_destination)
        ->execute();
      //@todo only one result is handled, should allow for multiple results
      $is_blocked = false;

      foreach ($result as $file) {
        $is_blocked = TRUE;
        $blocking_file = $file;
        $tmp_destination = file_directory_temp() ."/$blocking_file->filename";
      }

      $old_destination = $db_path;

      if ($old_destination == $desired_destination){
        return;
      }
      //Swap the files
      if ($is_blocked) {
        //move the blocking file to a temporary location
        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');
          return;
        }
        //DRUPAL 7 no longer changes the source filepath during move
        //move blocking file was successful, update the DB
        db_update('file_managed')
          ->fields(array('uri' => $tmp_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }


      //move the newfile to the prefered location
      if (!file_unmanaged_move($old_destination, $desired_destination)) {
        drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $old_destination, '%new' => $desired_destination)), 'error');
        return;
      }
      //move newfile was successful, update the DB
      db_update('file_managed')
        ->fields(array('uri' => $desired_destination))
        ->condition('fid', $new_file->get('fid')->value)
        ->execute();
      $new_file->setFileUri($desired_destination);//set the newfile's path to the correct path


      if ($is_blocked) {
        //move the older file from temp to the new _0 location
        if (!file_unmanaged_move($tmp_destination, $old_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');
          return;
        }
        //move blocking file was successful, update the DB with the actual location after file copy, so we use tmp_destination as it was updated during the move
        db_update('file_managed')
          ->fields(array('uri' => $old_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
    }
  }
}